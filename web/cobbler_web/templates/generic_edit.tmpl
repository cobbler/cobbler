{% extends "master.tmpl" %}
{% load site %}
{% block content %}


{% ifequal what "system" %}

<script type="text/javascript">

function intf_enable_field(field,enabled)
{
    if (enabled) {
        document.getElementById(field+"_row").style.display="table-row"
    } else {
        document.getElementById(field+"_row").style.display="none"
    }
}

function intf_update_visibility()
{
    is_slave  = false
    is_master = false
    value = document.getElementById("bonding").value
    if (value == "slave") {
        is_slave = true;
    }    
    else if (value == "master") {
        is_master = true;
    }

    is_static = document.getElementById("static").checked
 
    intf_enable_field("static",!is_slave)
    intf_enable_field("ip_address",(!is_slave))
    intf_enable_field("subnet",(!is_slave) && is_static)
    intf_enable_field("dns_name",!is_slave)
    intf_enable_field("static_routes",!is_slave)
    intf_enable_field("dhcp_tag",!is_slave)
    intf_enable_field("virt_bridge",!is_master)
    intf_enable_field("bonding_opts",is_master)
    intf_enable_field("bonding_master",is_slave)
}

function get_selected_interface()
{
   return document.getElementById("interfaces").value
}

last_interface = ""

function on_interface_change()
{
    // called when the user picks something new from the interface selector
    save_intf(last_interface);
    clear_intf();
    last_interface = get_selected_interface()
    load_intf()
}

function populate_widgets() 
{

    var buf = "";
    buf = buf + "<input type='text' name='newinterfacename' id='newinterfacename' value=''>";
    buf = buf + "<input type='button' name='addinterface' value='Add' onclick='javascript:on_interface_add()'/>";
    document.getElementById("widget_network_widget_a").innerHTML = buf;

    buf = "";
    buf = buf + "<select name='interfaces' id='interfaces' onchange='javascript:on_interface_change()'>";
    buf = buf + "</select>";
    buf = buf + "<input type='button' name='deleteinterface' value='Delete' onclick='javascript:on_interface_delete()'/>";
    document.getElementById("widget_network_widget_b").innerHTML = buf;

}

function on_interface_add()
{
   // called when the user hits the "new interface" button

   var iname = document.getElementById("newinterfacename").value

   if ((iname == "") || (iname == " ")) {
      alert("invalid interface name")
      return
   }

   if (interface_table[iname] != null) {
      alert("interface already exists")
      return
   }

   if (interface_table[iname] == null) {
      interface_table[iname] = new Array()
   }

   // fixme: would be nice to have this more autogenerated from the template
   interface_table[iname]["mac_address"] = ""
   interface_table[iname]["bonding"] = ""
   interface_table[iname]["bonding_master"] = ""
   interface_table[iname]["bonding_opts"] = ""
   interface_table[iname]["ip_address"] = ""
   interface_table[iname]["dns_name"] = ""
   interface_table[iname]["static_routes"] = ""
   interface_table[iname]["dhcp_tag"] = ""
   interface_table[iname]["virt_bridge"] = ""
   interface_table[iname]["subnet"] = ""
   interface_table[iname]["static"] = false
   interface_table[iname]["present"] = "1"
   interface_table[iname]["original"] = "0"

   var interfaces = document.getElementById("interfaces")
   ilen = interfaces.length
   var new_option = new Option(iname,iname)
   interfaces.options[ilen] = new_option
   interfaces.selectedIndex = ilen
   on_interface_change() // explicit firing required   
}

function on_interface_delete()
{
   selected = get_selected_interface()
   interfaces = document.getElementById("interfaces")

   if (interfaces.length == 1) {
      alert("systems must always have at least one interface")
      return
   } 
   
   clear_intf()
   for (i = interfaces.options.length - 1; i>=0; i--) {
     if (interfaces.options[i].value == selected) {
        interfaces.remove(i)
     }
   }
   interface_table[selected]["present"] = 0
   interfaces.selectedIndex = 0
   load_intf()
} 

function get_enabled_field(field,enabled)
{
    if (enabled) {
        return document.getElementById(field).value
    } else {
        return ""
    }
}

function save_intf(which) 
{
    // this populates the interface widget with the data for the currently selected interface
    // and is called when the user picks a certain interface from the drop-down

    iname = which
    var itable = interface_table[iname]
    if (itable == null) {
       interface_table[iname] = new Array()
       itable = interface_table[iname]
    }

    var bond = document.getElementById("bonding").value
    var is_slave  = false;
    var is_master = false;
    if (bond == "master") {
       is_master  = true;
    }
    if (bond == "slave") {
       is_slave   = true;
    }
    is_static=document.getElementById("static").checked

    itable["name"]       = iname
    itable["mac_address"] = document.getElementById("mac_address").value
    itable["bonding"]        = bond
    itable["bonding_master"] = get_enabled_field("bonding_master",is_slave)
    itable["bonding_opts"]   = get_enabled_field("bonding_opts",is_master)
    itable["static"]         = is_static
    itable["ip_address"]     = get_enabled_field("ip_address",(!is_slave))
    itable["subnet"]         = get_enabled_field("subnet",(!is_slave) && is_static)
    itable["dns_name"]       = get_enabled_field("dns_name",!is_slave)
    itable["static_routes"]  = get_enabled_field("static_routes",!is_slave)
    itable["dhcp_tag"]       = get_enabled_field("dhcp_tag",!is_slave)
    itable["virt_bridge"]    = get_enabled_field("virt_bridge",!is_master)
    itable["present"]        = document.getElementById("present").value
    itable["original"]       = document.getElementById("original").value

}

function load_intf()
{
    // this populates the interface widget with the data for the currently selected interface
    // and is called when the user picks a certain interface from the drop-down
    // FIXME: can we load this up from the template data?
    intf = get_selected_interface()
    document.getElementById("mac_address").value    = interface_table[intf]["mac_address"]
    document.getElementById("bonding").value        = interface_table[intf]["bonding"]  
    document.getElementById("bonding_master").value = interface_table[intf]["bonding_master"]
    document.getElementById("bonding_opts").value   = interface_table[intf]["bonding_opts"]
    document.getElementById("static").checked       = interface_table[intf]["static"]
    document.getElementById("ip_address").value     = interface_table[intf]["ip_address"]
    document.getElementById("subnet").value         = interface_table[intf]["subnet"]
    document.getElementById("dns_name").value       = interface_table[intf]["dns_name"]
    document.getElementById("static_routes").value  = interface_table[intf]["static_routes"]
    document.getElementById("dhcp_tag").value       = interface_table[intf]["dhcp_tag"]
    document.getElementById("virt_bridge").value    = interface_table[intf]["virt_bridge"]
    document.getElementById("present").value        = interface_table[intf]["present"]
    document.getElementById("original").value       = interface_table[intf]["original"]
    
    intf_update_visibility()
}

function clear_intf()
{
    // this clears the interface list and populates it with the currently selected interface data

    document.getElementById("mac_address").value    = ""
    document.getElementById("bonding").value        = "na"
    document.getElementById("bonding_master").value = ""
    document.getElementById("bonding_opts").value   = ""
    document.getElementById("static").checked       = true
    document.getElementById("ip_address").value     = ""
    document.getElementById("subnet").value         = ""
    document.getElementById("dns_name").value       = ""
    document.getElementById("static_routes").value  = ""
    document.getElementById("dhcp_tag").value       = ""
    document.getElementById("virt_bridge").value    = ""
    document.getElementById("present").value        = "1"
    document.getElementById("original").value       = "0"

}

function build_interface_table()
{
    // called during onload, this stores all of the interfaces from Cheetah in javascript
    // so that we can manipulate them dynamically in more interesting ways
    interface_table = new Array()
    var last = ""
    {% smart_if interface_length > 0 %}
       var ifound = 0
       {% for key,value in interfaces.items %}
           interface_table['{{ key }}'] = new Array()
           interface_table['{{ key }}']["mac_address"]    = "{{ value.mac_address }}"
           interface_table['{{ key }}']["bonding"]        = "{{ value.bonding }}"
           interface_table['{{ key }}']["bonding_master"] = "{{ value.bonding_master }}"
           interface_table['{{ key }}']["bonding_opts"]   = "{{ value.bonding_opts }}"
           interface_table['{{ key }}']["static"]         = {{ value.static|lower }}
           interface_table['{{ key }}']["ip_address"]     = "{{ value.ip_address }}"
           interface_table['{{ key }}']["subnet"]         = "{{ value.subnet }}"
           interface_table['{{ key }}']["dns_name"]       = "{{ value.dns_name }}"
           interface_table['{{ key }}']["static_routes"]  = "{{ value.static_routes|join:" " }}"
           interface_table['{{ key }}']["dhcp_tag"]       = "{{ value.dhcp_tag }}"
           interface_table['{{ key }}']["virt_bridge"]    = "{{ value.virt_bridge }}"
           interface_table['{{ key }}']["present"]        = "1"
           interface_table['{{ key }}']["original"]       = "1"
           last = "{{ key }}"
       {% endfor %}
    {% endsmart_if %}
    return interface_table
}

function on_form_submit()
{
    // form submission handler
    save_intf(get_selected_interface())
    var listing = ""
    for (var iname in interface_table) {
        if (listing == "") {
            listing = iname
        } else {
            listing = iname + "," + listing
        }
        for (var ikey in interface_table[iname]) {
            var field_name = ikey + "-" + iname
            var current_value = interface_table[iname][ikey]
            var new_input=document.createElement('input')
            new_input.name=field_name
            new_input.value=current_value
            new_input.style.display='none'
            document.forms[0].appendChild(new_input)

        }
    }
    document.getElementById("interface_list").value = listing
    document.getElementById("name").disabled= false
    document.forms[0].submit()
}

function populate_interfaces() {
    interfaces = document.getElementById("interfaces")
    ilen = interfaces.length
    {% for x in interface_names %}
        var new_option = new Option("{{ x }}","{{ x }}")
        interfaces.options[ilen] = new_option
        interfaces.selectedIndex = ilen
        ilen = ilen + 1 
    {% endfor %}
    interfaces.selectedIndex = 0
    document.getElementById("static").onchange=intf_update_visibility;
    document.getElementById("bonding").onchange=intf_update_visibility;
}

function page_onload() {
    populate_widgets()
    interface_table = build_interface_table()
    populate_interfaces()
    last_interface = get_selected_interface()
    load_intf()
}
</script>
{% endifequal %}

<script type="text/javascript">
$(document).ready(function()
{
  //hide the all of the element with class msg_body
  $(".sectionbody").hide();
  $("#block_General").show();
  //toggle the componenet with class sectionbody
  $(".sectionheader").click(function()
  {
    $(this).next(".sectionbody").slideToggle(500);
  });
});
</script>

<fieldset id="edit">
  <legend>{% ifequal editmode 'edit'  %}Editing{% else %}Adding{% endifequal %} a {{ what|capfirst }}{%ifequal editmode 'edit' %}: {{ name }}{% endifequal %}</legend>
  <form method="post" action="/cobbler_web/{{ what }}/save">
    <input type="hidden" name="editmode" value="{{ editmode }}"/>
    <input type="hidden" name="subobject" value="{{ subobject }}"/>
    <div>
      <table border="0" width="0" height="0">
      {% for item in fields %}
        {% ifchanged item.block_section %}
      </table>
    </div>
    <h3 class="sectionheader action">&rArr; {{ item.block_section }}</h3>
    <div class="sectionbody" id="block_{{ item.block_section }}">
    <table border="0">
       {% endifchanged %}
      <tr id="{{ item.dname  }}_row" class="editrow">
        <td valign="top"><label id="{{ item.dname }}_caption">{{ item.caption }}</label></td>
        {% ifequal item.html_element "widget" %}
        <td><div id="widget_{{ item.dname }}" />
        {% else %}
        <td>
          {% ifequal item.html_element "text" %}
          {% smart_if editmode == "edit" and item.dname == "name" %}
          {{ item.value }}<input type="hidden" name="{{ item.dname }}" id="{{ item.dname }}" value="{{ item.value }}"/>
          {% else %}
          <input type="text" name="{{ item.dname }}" id="{{ item.dname }}" value="{{ item.value }}"/>
          {% endsmart_if %}
          {% endifequal %}
          {% ifequal item.html_element "textarea" %}
          <textarea name="{{ item.dname }}" id="{{ item.dname }}" rows="4" cols="40">{{ item.value }}</textarea><br />
          {% endifequal %}
          {% ifequal item.html_element "radio" %}
            {% for choice in item.choices %}
              {% ifequal item.value choice %}
          <input type="radio" name="{{ item.dname }}" id="{{ item.dname }}" value="{{ choice }}" checked="checked">{{ choice }}&nbsp;
                {% else %}
          <input type="radio" name="{{ item.dname }}" id="{{ item.dname }}" value="{{ choice }}">{{ choice }}&nbsp;
              {% endifequal %}
            {% endfor %}
          {% endifequal %}
            {% ifequal item.html_element "checkbox" %}
              {% ifequal item.value 1 %}
          <input type="checkbox" name="{{ item.dname }}" id="{{ item.dname }}" value="{{ item.dname }}" checked="checked" /> Enabled
              {% else %}
          <input type="checkbox" name="{{ item.dname }}" id="{{ item.dname }}" value="{{ item.dname }}" /> Enabled
              {% endifequal %}
            {% endifequal %}
            {% ifequal item.html_element "select" %}
          <select id="{{ item.dname }}" name="{{ item.dname }}">
              {% for choice in item.choices %}
                {% ifequal item.value choice %}
          <option value="{{ choice }}" selected>{{ choice }}</A>
                {% else %}
          <option value="{{ choice }}">{{ choice }}</A>
                {% endifequal %}
              {% endfor %} 
          </select>
          {% endifequal %}
          {% ifequal item.html_element "multiselect" %}
          <select multiple id="{{ item.dname }}" name="{{ item.dname }}" class="edit">
            {% for choice in item.choices %}
              {% smart_if choice in item.value_raw %}
          <option value="{{ choice }}" selected>{{ choice }}</a>
              {% else %}
          <option value="{{ choice }}">{{ choice }}</a>
              {% endsmart_if %}
            {% endfor %} 
          </select>
          {% endifequal %}
          {% smart_if editmode == "edit" and item.dname == "name" %}
          (editing, value is read-only)
          {% else %}
          <em>{{ item.tooltip }}</em>
          {% endsmart_if %}
        </td>
        {% endifequal %}
      </tr>
    {% endfor %}
    </table>
    </div>

    {% ifequal what "system" %}
        <input type="hidden" id="interface_list" name="interface_list" value="1"/>
        <input type="hidden" id="present" name="present" value="1"/>
        <input type="hidden" id="original" name="original" value="1"/>
    {% endifequal %}


    <table border=0>
    <tr>
    <td>
    </td>
    <td>
    {% if editable %}
    <input type="submit" name="submit" onClick="on_form_submit();" value="Save"/>
    <input type="reset" name="reset" value="Reset"/>
    {% else %}
    This user does not have permissions to edit this object.
    {% endif %}
    </td>
    </tr>
    


</table>

    </div>
    </div>

</fieldset>
</form>
{% endblock content %}
