#if $getVar("system_name","") != ""
# Start pre_install_network_config generated code
#raw
# generic functions to be used later for discovering NICs
mac_exists() {
  [ -z "$1" ] && return 1

  if which ip 2>/dev/null >/dev/null; then
    ip -o link | grep -i "$1" 2>/dev/null >/dev/null
    return $?
  elif which esxcfg-nics 2>/dev/null >/dev/null; then
    esxcfg-nics -l | grep -i "$1" 2>/dev/null >/dev/null
    return $?
  else
    ifconfig -a | grep -i "$1" 2>/dev/null >/dev/null
    return $?
  fi
}
get_ifname() {
  if which ip 2>/dev/null >/dev/null; then
    IFNAME=$(ip -o link | grep -i "$1" | sed -e 's/^[0-9]*: //' -e 's/:.*//')
  elif which esxcfg-nics 2>/dev/null >/dev/null; then
    IFNAME=$(esxcfg-nics -l | grep -i "$1" | cut -d " " -f 1)
  else
    IFNAME=$(ifconfig -a | grep -i "$1" | cut -d " " -f 1)
    if [ -z $IFNAME ]; then
      IFNAME=$(ifconfig -a | grep -i -B 2 "$1" | sed -n '/flags/s/:.*$//p')
    fi
  fi
}
#end raw
    #set ikeys = $interfaces.keys()
    #import re
    #set $vlanpattern = $re.compile("[a-zA-Z0-9]+[\.][0-9]+")
    #set $routepattern = $re.compile("[0-9/.]+:[0-9.]+")
    ##
    ## collect bond and bridge slaves
    #set $bond_slaves = {}
    #set $bridge_slaves = {}
    #for $iname in $ikeys
        #if $interfaces[$iname]["interface_type"] == "bond_slave"
            #set $this_master = $interfaces[$iname]["interface_master"]
            #if $this_master and not $this_master in $bridge_slaves
                #set $bond_slaves[$this_master] = []
            #end if
            <% bond_slaves[this_master].append(iname) %>
        #end if
        #if $interfaces[$iname]["interface_type"] in ("bridge_slave","bonded_bridge_slave")
            #set $this_master = $interfaces[$iname]["interface_master"]
            #if $this_master and not $this_master in $bridge_slaves
                #set $bridge_slaves[$this_master] = []
            #end if
            <% bridge_slaves[this_master].append(iname) %>
        #end if
    #end for
    #for $iname in $ikeys
#  Start $iname
        #set $idata         = $interfaces[$iname]
        #set $mac           = $idata["mac_address"]
        #set $management    = $idata["management"]
        #set $static        = $idata["static"]
        #set $ip            = $idata["ip_address"]
        #set $netmask       = $idata["netmask"]
        #set $gateway       = $getVar("gateway","")
        #set $if_gateway    = $idata["if_gateway"]
        #set $iface_type    = $idata["interface_type"]
        #set $iface_master  = $idata["interface_master"]
        #set $static_routes = $idata["static_routes"]
        #set $ip6           = $idata["ipv6_address"]
        #set $ip6_prefix    = $idata["ipv6_prefix"]
        #set $ip6_gw        = $idata["ipv6_default_gateway"]
        #set $devfile       = "/etc/sysconfig/network-scripts/ifcfg-" + $iname
        ## Ignore BMC interface
        #if $iface_type.lower() == "bmc"
            #continue
        #end if
        #if $iface_type.lower() not in ("bond_slave","bridge_slave","bonded_bridge_slave")
            #if $static and ($ip != "" or $ip6 != "")
                ## Set static proto, don't know yet if ipv4 or ipv6 or both
                #set $netinfo = "--bootproto=static"
                #if $ip != ""
                    #if $netmask == ""
                        ## Netmask not provided, default to /24.
                        #set $netmask = "255.255.255.0"
                    #end if
                    #set $netinfo = "%s --ip=%s --netmask=%s" % ($netinfo, $ip, $netmask)
                #end if
                #if $if_gateway != ""
	                #if $if_gateway == $gateway
	                   #set $netinfo = "%s --gateway=%s" % ($netinfo, $if_gateway)
	                #else
	                   #set $netinfo = "%s --gateway=%s --nodefroute" % ($netinfo, $if_gateway)
	                #end if
                #else if $gateway != "" and $management
	                #set $netinfo = "%s --gateway=%s" % ($netinfo, $gateway)
    	        #end if
    	        #if $len($name_servers) > 0
                    #set $netinfo = "%s --nameserver=%s" % ($netinfo, ','.join($name_servers))
                #end if
                #if $ip6 != "" and $ip6_gw != ""
                    #if $ip6_prefix == ""
                        ## Prefix not provided, default to /64.
                        #set $ip6_prefix = "64"
                    #end if
                    #set $netinfo = "%s --ipv6=%s/%s --ipv6gateway=%s" % ($netinfo, $ip6, $ip6_prefix, $ip6_gw)
                #end if
            #else if not $static
                #set $netinfo = "--bootproto=dhcp"
            #else
                ## Skip this interface, it's set as static, but without
                ## networking info.
#   Skipping (no configuration)...
#   Ensure there is some pre_install_network_config file created
touch /tmp/pre_install_network_config
                #continue
            #end if
            #if $hostname != ""
                #set $netinfo = "%s --hostname=%s" % ($netinfo, $hostname)
            #end if
            #if $vlanpattern.match($iname)
                #set $vlan_id = $iname.split(".")[1]
                #set $netinfo += " --vlanid=$vlan_id"
            #end if
        #end if
#   Configuring $iname ($mac) $iface_type
        #if $iface_type in ("bond", "bonded_bridge_slave")
            #set $opts = $idata["bonding_opts"]
            #if $iname in $bond_slaves
                #set $slaves = ','.join($bond_slaves[$iname])
echo "network $netinfo --device=$iname --bondslaves=$slaves --bondopts=$opts --onboot=on" >> /tmp/pre_install_network_config
            #else
#    ERROR - no slaves for $iname
            #end if
        #else if $iface_type == "bridge"
            #set $opts = $idata["bridge_opts"]
            #if $iname in $bridge_slaves
                #set $slaves = ','.join($bridge_slaves[$iname])
echo "network $netinfo --device=$iname --bridgeslaves=$slaves --bridgeopts=$opts --onboot=on" >> /tmp/pre_install_network_config
            #else
#    ERROR - no slaves for $iname
            #end if
        #else if $iface_type.lower() in ("bond_slave","bridge_slave")
            #if $getVar("os_version","") in ["rhel8", "rhel9"]
#   Work around https://bugzilla.redhat.com/show_bug.cgi?id=2031385#c8
if mac_exists $mac
then
  get_ifname $mac
  echo "network --device=\$IFNAME --onboot=off" >> /tmp/pre_install_network_config
else
  echo "network --device=$iname --onboot=off" >> /tmp/pre_install_network_config
fi
            #else
#   Skipping (slave-interface)
            #end if
        #else
if mac_exists $mac
then
  get_ifname $mac
  echo "network --device=$mac $netinfo" >> /tmp/pre_install_network_config
            #for $route in $static_routes
                #if $routepattern.match($route)
                    #set $routebits = $route.split(":")
                    #set [$network, $router] = $route.split(":")
  ip route add $network via $router dev \$IFNAME
                #else
  # Warning: invalid route "$route"
                #end if
            #end for
else
  echo "network --device=$iname $netinfo" >> /tmp/pre_install_network_config
            #for $route in $static_routes
                #if $routepattern.match($route)
                    #set $routebits = $route.split(":")
                    #set [$network, $router] = $route.split(":")
  ip route add $network via $router dev $iname
                #else
  # Warning: invalid route "$route"
                #end if
            #end for
fi
        #end if
    #end for
# End pre_install_network_config generated code
#else
# profile based install so just let anaconda do its best
echo "network --bootproto=dhcp --onboot=on" > /tmp/pre_install_network_config
#end if
