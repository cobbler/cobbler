#-------------------------------------------------------------------------------
# Set defaults (is re-set by machine specific configuration file)
#-------------------------------------------------------------------------------
set arch='x86_64'
set hostname='dummy'
set system='dummy'
set lang=en
set serial_console=false
set serial_baud=115200
set serial_line=0
set k_console=""
set local_boot_file=""
set kernel_options=""
set timeout=80
set default='local'
set gfxpayload=text

export serial_console
export serial_baud
export serial_line
export k_console
export timeout
export default
export lang
export hostname
export system
export local_boot_file

# preset architecture, so it will never be empty
if [ "$grub_cpu" == "i386" ]; then
  set arch='x86_64'
elif [ "$grub_cpu" == "x86_64" ]; then
  set arch='x86_64'
elif [ "$grub_cpu" == "powerpc" ]; then
  set arch='ppc64le'
elif [ "$grub_cpu" == "arm64" ]; then
  set arch='aarch64'
else
  echo "Warning: No architecture found for ${grub_cpu}"
  set arch='unknown'
fi

echo "Running on $arch CPU architecture"

#-------------------------------------------------------------------------------
# MAC address
#-------------------------------------------------------------------------------
set mac=${net_default_mac}
export mac

if [ -s "$prefix/system/$mac" ]; then
  source "$prefix/system/$mac"
  echo "Machine specific grub config file $prefix/system/$mac for $system loaded"
else
  echo "Could not find machine specific grub config file $prefix/system/$mac"
fi

#-------------------------------------------------------------------------------
# Serial console
#-------------------------------------------------------------------------------
if [ $serial_console == true -a "$grub_platform" != "efi" ]; then
  # Do not fiddle with console on EFI, this should already be set
  serial --speed=$serial_baud --unit=$serial_line --word=8 --parity=no --stop=1
  terminal_input --append serial
  terminal_output --append serial
  if [ $serial_console == true ]; then
    # This is used in sourced submenus later
    set k_console="console=ttyS${serial_line},${serial_baud}"
  fi

else
  terminal_input console
  terminal_output console
fi

#-------------------------------------------------------------------------------
# EFI support (in fact shim support!)
#
# grub should not offer linuxefi/initrdefi commands but instead handle this
# internally.
# But it does not and this allows us clean grub.cfg implementations without
# the need of checking for efi/nonefi in possibly sourced subconfigfiles.
#
# From our grub expert (Raymund Will): linuxefi/initrdefi is for shim
# support/protocol only.
# A possible enhancement here would be, if we can differ secure_boot_enabled.
# grubXY.efi can load kernels via linux or linuxefi, it is only shim
# case where this has to be differed.
#
#-------------------------------------------------------------------------------
function clinux {
  if [ "$grub_cpu" == "x86_64" ]; then
    linuxefi "$@"
  else
    linux "$@"
  fi
}
function cinitrd {
  if [ "$grub_cpu" == "x86_64" ]; then
    initrdefi "$@"
  else
    initrd "$@"
  fi
}

# After sourcing local_*.cfg we have a "local" menuentry
if [ "$grub_platform" == "efi" ]; then
  source "$prefix/local_efi.cfg"
elif [ "${arch}" == "x86_64" ]; then
  # Try to catch all non efi x86 cases here
  source "$prefix/local_legacy.cfg"
elif [ "${grub_cpu}-${grub_platform}" == "powerpc-ieee1275" ]; then
  source "$prefix/local_powerpc-ieee1275.cfg"
else
  echo "Unknown grub cpu ${grub_cpu} or platform ${grub_platform}"
  source "$prefix/local_legacy.cfg"
fi

if [ !"{$arch}" == "unknown" ]; then
  echo "Warning: architecture is unknown, skipping menu items";
  else
  source "$prefix/${arch}_menu_items.cfg"
fi

# Trigger local boot setting (may alter grub.cfg) at the very end to avoid races
if [ "$local_boot_file" != "" ];then
   if [ -s  "$local_boot_file" ];then
      echo "Set $system to local boot by requesting file $local_boot_file"
   else
      echo "Set $system to local boot failed. File $local_boot_file not found"
  fi
fi
