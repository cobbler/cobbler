#set $osversion = $getVar("os_version","")
#set $hostname = $getVar("hostname","")
#if $hostname == ""
#set $hostname = $getVar("system_name","cobbler")
#end if
#if $getVar("dns_name_eth0","") != ""
	#set $my_hostname = $hostname.split('.',1)[:1][0]
	#set $my_domainname = $dns_name_eth0.split('.',1)[1:][0]
#else
	#set $my_hostname = $hostname
	#set $my_domainname = "site"
#end if

  <networking>
    <keep_install_network config:type="boolean">false</keep_install_network>
    <dhcp_options>
      <dhclient_client_id></dhclient_client_id>
      <dhclient_hostname_option></dhclient_hostname_option>
    </dhcp_options>
    <dns>
      <dhcp_hostname config:type="boolean">false</dhcp_hostname>
      <dhcp_resolv config:type="boolean">false</dhcp_resolv>
      <write_hostname config:type="boolean">false</write_hostname>
      <resolv_conf_policy></resolv_conf_policy>
      <hostname>$my_hostname</hostname>
      <domain>$my_domainname</domain>
      #if $getVar("name_servers_search","") != ""
      <searchlist config:type="list">
      #for $sd in $name_servers_search
        <search>$sd</search>
      #end for
      </searchlist>
      #end if
      <nameservers config:type="list">
      #for $ns in $name_servers
        <nameserver>$ns</nameserver>
      #end for
      </nameservers>
    </dns>
    <interfaces config:type="list">
    #if $getVar("system_name","") != ""
    #import re
    #set $vlanpattern = $re.compile("[a-zA-Z0-9]+[\.][0-9]+")
    #set $ikeys = $interfaces.keys()
    #for $iface in $ikeys
      #set $idata                = $interfaces[$iface]
      #set $mac                  = $idata.get("mac_address", "").lower()
      #set $static               = $idata.get("static", "")
      #set $ip                   = $idata.get("ip_address", "")
      #set $netmask              = $idata.get("netmask", "")
      #set $static_routes        = $idata.get("static_routes", "")
      #set $iface_type           = $idata.get("interface_type", "").lower()
      #set $iface_master         = $idata.get("interface_master", "")
      #set $bonding_opts         = $idata.get("bonding_opts", "").lower()
      #set $ipv6_address         = $idata.get("ipv6_address", "")
      #set $ipv6_secondaries     = $idata.get("ipv6_secondaries", "")
      #set $ipv6_mtu             = $idata.get("ipv6_mtu", "")
      #set $ipv6_default_gateway = $idata.get("ipv6_default_gateway", "")
      #set $ipv6_static_routes   = $idata.get("ipv6_static_routes", "")
      ## start of interface section
      <interface>
      #if $iface_type in ("bond", "master")
        <bonding_master>yes</bonding_master>
        <bonding_module_opts>$bonding_opts</bonding_module_opts>
        #set $loop_ikeys = $interfaces.keys()
        #set $loop_counter = 0
        #for $loop_iface in $loop_ikeys
          #set $loop_idata          = $interfaces[$loop_iface]
          #set $loop_interface_type = $loop_idata.get("interface_type", "").lower()
          #if $loop_interface_type in ("slave","bond_slave")
             #if $loop_idata["interface_master"] != ""
                #if $loop_idata["interface_master"].lower() == $iface.lower()
        <bonding_slave$loop_counter>$loop_iface</bonding_slave$loop_counter>
                   #set $loop_counter += 1
                #end if
             #end if
          #end if
        #end for
        #if $static
        <bootproto>static</bootproto>
        #else
        <bootproto>dhcp</bootproto>
        #end if
        <device>$iface</device>
        <ipaddr>$ip</ipaddr>
        <netmask>$netmask</netmask>
        <startmode>auto</startmode>
        <usercontrol>no</usercontrol>
      #elif $iface_type in ("slave","bond_slave","bridge_slave")
        <bootproto>none</bootproto>
        <device>$iface</device>
        #if $osversion == "sles12" or re.match('^sles12sp[1234]$', $osversion)
        <startmode>hotplug</startmode>
        #else
        <startmode>off</startmode>
        #end if
        <usercontrol>no</usercontrol>
      #elif $iface_type in ("","na")
        #if $static
        <bootproto>static</bootproto>
        #else
        <bootproto>dhcp</bootproto>
        #end if
        <device>$iface</device>
        <lladdr>$mac</lladdr>
        <ipaddr>$ip</ipaddr>
        <netmask>$netmask</netmask>
        <startmode>auto</startmode>
        <usercontrol>no</usercontrol>
      #end if
      ## ===================================================================
      ## VLAN configuration
      ## ===================================================================
      #if $vlanpattern.match($iface)
        #set [$etherdevice, $vlanid] = $iface.split(".")
        <etherdevice>$etherdevice</etherdevice>
        <vlan_id>$vlanid</vlan_id>
      #end if
      ## ===================================================================
      ## IPv6 support
      ## ===================================================================
      #if $ipv6_address != ""
        <aliases>
          <alias0>
            <IPADDR>$ipv6_address</IPADDR>
            <LABEL>a0</LABEL>
            <PREFIXLEN>64</PREFIXLEN>
          </alias0>
        #if $ipv6_secondaries != ""
          #set $s = 1
          #for $alias in $ipv6_secondaries
          <alias${s}>
            <IPADDR>$alias</IPADDR>
            <LABEL>a${s}</LABEL>
            <PREFIXLEN>64</PREFIXLEN>
          </alias${s}>
            #set $s += 1
          #end for
        #end if
        </aliases>
      #end if
      </interface>
    #end for
    #end if
    </interfaces>
    <managed config:type="boolean">false</managed>
    <net-udev config:type="list">
    #if $getVar("system_name","") != ""
    #set $ikeys = $interfaces.keys()
    #for $iface in $ikeys
      #set $idata = $interfaces[$iface]
      #set $mac            = $idata["mac_address"]
      #set $interface_type = $idata["interface_type"]
      #if $mac.lower() != ""
      #if $interface_type.lower() not in ["bond","bridge"]
      <rule>
        <name>$iface</name>
        <rule>ATTR{address}</rule>
        <value>$mac.lower()</value>
      </rule>
      #end if
      #end if
    #end for
    #end if
    </net-udev>
    <routing>
      <ip_forward config:type="boolean">false</ip_forward>
      #if $getVar("system_name","") != ""
      <routes config:type="list">
        <route>
          <destination>default</destination>
          <netmask>-</netmask>
          <device>-</device>
          <gateway>$gateway</gateway>
        </route>
        ## ===================================================================
        ## IPv4 static route setup
        ## ===================================================================
        #for $iface in $ikeys
          #set $idata         = $interfaces[$iface]
          #set $static_routes = $idata.get("static_routes", "")
          #for $route in $static_routes
            #set routepattern = $re.compile("[0-9/.]+:[0-9.]+")
            #if $routepattern.match($route)
              #set $routebits = $route.split(":")
              #set [$network, $router] = $route.split(":")
        <route>
          <destination>$network</destination>
          <netmask>-</netmask>
          <device>$iface</device>
          <gateway>$router</gateway>
        </route>
            #end if
          #end for
        #end for
        ## ===================================================================
        ## IPv6 routing setup
        ## ===================================================================
        #for $iface in $ikeys
          #set $idata                = $interfaces[$iface]
          #set $ipv6_static_routes   = $idata.get("ipv6_static_routes", "")
          #set $ipv6_default_gateway = $idata.get("ipv6_default_gateway", "")
          #if $ipv6_default_gateway != ""
        <route>
          <destination>default</destination>
          <netmask>-</netmask>
          <device>$iface</device>
          <gateway>$ipv6_default_gateway</gateway>
        </route>
          #end if
          #for $route in $ipv6_static_routes
            #set routepattern = $re.compile("[0-9a-fA-F:/]+,[0-9a-fA-F:]+")
            #if $routepattern.match($route)
              #set $routebits = $route.split(",")
              #set [$network, $router] = $route.split(",")
        <route>
          <destination>$network</destination>
          <netmask>-</netmask>
          <device>$iface</device>
          <gateway>$router</gateway>
        </route>
            #end if
          #end for
        #end for
      </routes>
      #end if
    </routing>
  </networking>
