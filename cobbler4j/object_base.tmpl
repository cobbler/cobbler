/**
 * Copyright (c) 2009 Red Hat, Inc.
 *
 * This software is licensed to you under the GNU General Public License,
 * version 2 (GPLv2). There is NO WARRANTY for this software, express or
 * implied, including the implied warranties of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2
 * along with this software; if not, see
 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.
 *
 * Red Hat trademarks are not licensed under GPLv2. No permission is
 * granted to use or replicate Red Hat trademarks that are incorporated
 * in this software or its documentation.
 */

package org.fedorahosted.cobbler.autogen;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.fedorahosted.cobbler.CobblerObject;
import org.fedorahosted.cobbler.CobblerConnection;
import org.fedorahosted.cobbler.ObjectType;

/**
 * @author paji    (original for spacewalk)
 * @author mdehaan (code generated new version)
 * @version $Rev$
 */
public class $JavaObjectType extends CobblerObject {

    private static String INHERIT_STRING = "<<inherit>>";
    
    public ${JavaObjectType}(CobblerConnection clientIn, Map dataMapIn, Map blendedDataMapIn) {
        super(clientIn, dataMapIn, blendedDataMapIn);
    }

    public ${JavaObjectType}(CobblerConnection clientIn) {
        super(clientIn, new HashMap(), null);
    }

    #for $val in $fields 
        #set $interface_specific = "False"
        #set $field_name = $val[0]
        #if $field_name.find("*") != -1
            #set $interface_specific = "True"
            #set $field_name = $field_name.replace("*","")
        #end if
        #set $field_default = $val[1]
        #set $field_default_sub = $val[2]
        #set $field_display_name = $val[3]
        #set $field_hidden = $val[4]
        #set $field_tooltip = $val[5]
        #set $field_choices = $val[6]
        #set $field_type = $val[7]
        #set $field_tokens = $field_name.split("_")
        #set $up_var_name = ""
        #for $ft in $field_tokens
           #set $up_var_name = $up_var_name + $ft.title()
        #end for
        ## // FIXME: need to infer the types and template stuff out
        ## // magically
        #set $var_type = "String" 

    #if $field_type == "str"
        #set $var_type = "String"
    #elif $field_type == "int" 
        #set $var_type = "Integer"
    #elif $field_type == "float"
        #set $var_type = "Double"
    #elif $field_type == "list"
        #set $var_type = "List"
    #elif $field_type == "dict"
        #set $var_type = "Map"
    #elif $field_type == "bool"
        #set $var_type = "Boolean"
    #end if

    #if $field_hidden != "True"

    /**
     * Set the value for field: $field_name
     * ${field_tooltip}s
     * @param input input value
     #if $interface_specific == "True"
     * @param interfaceName name of the interface, such as "eth0", to manipulate
     #end if
     */
    #if $interface_specific == "False"
    public void set${up_var_name}(${var_type} input) {
    #else
    public void set${up_var_name}(${var_type} input, String interfaceName) {
    #end if
        // FIXME: any further type mangling needed?
        modify("${field_name}", input);
    }
    #end if
    
    /**
     * Retrieve the value for field: $field_name
    #if $field_tooltip != ""
     * comments: ${field_tooltip}
    #end if
     * @param input input value
     #if $interface_specific == "True"
     * @param interface the name of the interface, such as "eth0", to manipulate
     #end if
     * @return the value of the field
     */
    #if $interface_specific == "False"
    public ${var_type} get${up_var_name}() {
    #else
    public ${var_type} get${up_var_name}(String interfaceName) {
    #end if
        Object o = access("${field_name}");
        if (o instanceof String && ((String)o).equals(INHERIT_STRING)) {
            // Object is set to inherit this setting, so fetch if from the
            // "blended" property map if we can:
            o = blendedAccess("${field_name}");
            
        }
    #if $var_type == "Boolean"
        // Some boolean fields come back from cobbler as integers, handle this situation:
        if (o instanceof Integer) {
            if ((Integer)o == 0) {
                return Boolean.FALSE;
            }
            return Boolean.TRUE;
        }

    #end if
        return (${var_type})o;
    }

    #end for

    public ObjectType getObjectType() {
        return ObjectType.$CobblerObjectType;
    }

}
